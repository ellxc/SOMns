class VectorBench usingPlatform: platform andHarness: harness = Value (
| private Harness = harness.
  private Benchmark = harness Benchmark.
  private Vector    = platform kernel Vector.
  private Array     = platform kernel Array.
  private Dictionary     = platform collections Dictionary.
|
)(

    public class VectorAppend fromArgs: args = Benchmark (
        | private args = args.
          (* seed: random seed to use *)
          private seed = args at: 'seed' ifAbsent: 645238.
          private random = Harness JenkinsRandom new: seed.
          (* block: evaluated to use as the value for each append *)
          private block = args at: 'block' ifAbsent: [[:z | random next.]]. 
          (* persist: do not clear vector between each iteration *)
          private persist = args at: 'persist' ifAbsent: false.
          private a ::= Vector new. 
          private i ::= 0. 
          private x ::= nil. |

    )(

        setup = (
            persist ifFalse: [
                a:: Vector new.
                i:: 0.
            ]
        )

        before = (
            x:: block value: i.
            i:: i + 1.
        )

        benchmark = (
            a append: (x).
            ^ a size.
        )

        verifyResult: result = (
            assert: i equals: result
        )
    ) : (
    public newInstance = ( ^ self fromArgs: Dictionary new. )
    public newInstance: args = ( ^ self fromArgs: args )
    )

    
    public class VectorRemoveLast fromArgs: args = Benchmark (
        | private args = args.
          (* size: size of vector to remove from *)
          private size = args at: 'size' ifAbsent: 10.
          (* seed: random seed to use *)
          private seed = args at: 'seed' ifAbsent: 56432.
          private random = Harness JenkinsRandom new: seed.
          (* block: evaluated to use as the value for each append when setting up the vector *)
          private block = args at: 'block' ifAbsent: [[:z | random next.]]. 
          a ::= nil. 
          i ::= nil. |
    )(

        setup = (
            a:: Vector new: size.
            size timesRepeat: [ :i | 
                        a append: (block value: i)
            ].
            i:: size
        )

        before = ( 
            i:: i - 1.
        )

        benchmark = (
            a remove.
            ^ a size.
        )

        verifyResult: result = (
            assert: i equals: result
        )
    ) : (
    public newInstance = ( ^ self fromArgs: Dictionary new. )
    public newInstance: args = ( ^ self fromArgs: args )
    )

    public class VectorRemoveFirst fromArgs: args = Benchmark (
        | private args = args.
          (* size: size of vector to remove from *)
          private size = args at: 'size' ifAbsent: 10.
          (* seed: random seed to use *)
          private seed = args at: 'seed' ifAbsent: 56432.
          private random = Harness JenkinsRandom new: seed.
          (* block: evaluated to use as the value for each append when setting up the vector *)
          private block = args at: 'block' ifAbsent: [[:z | random next.]]. 
          a ::= nil. 
          i ::= nil. |
    )(

        setup = (
            a:: Vector new: size.
            size timesRepeat: [ :i | 
                        a append: (block value: i)
            ].
            i:: size
        )

        before = ( 
            i:: i - 1.
        )

        benchmark = (
            a remove.
            ^ a size.
        )

        verifyResult: result = (
            assert: i equals: result
        )
    ) : (
    public newInstance = ( ^ self fromArgs: Dictionary new. )
    public newInstance: args = ( ^ self fromArgs: args )
    )

    public class VectorIter fromArgs: args = Benchmark(
        | private args = args.
          (* size: size of vector to iterate over *)
          private size = args at: 'size' ifAbsent: 10.
          (* seed: random seed to use *)
          private seed = args at: 'seed' ifAbsent: 56432.
          private random = Harness JenkinsRandom new: seed.
          (* block: evaluated to use as the value for each append when setting up the vector *)
          private block = args at: 'block' ifAbsent: [[:z | random next.]]. 
          a ::= nil. |
        )(

        before = (
            a:: Vector new: size.
            size timesRepeat: [ :i | 
                        a append: (block value: i)
            ].
        )

        benchmark = (
            | count |
            count:: 0.
            a do: [:i | count:: (count + 1)].
            ^count
        )

        verifyResult: result = (
            assert: size equals: result
        )
    ) : (
    public newInstance = ( ^ self fromArgs: Dictionary new. )
    public newInstance: args = ( ^ self fromArgs: args )
    )

    public class VectorRandomAccess fromArgs: args = Benchmark (
        | private args = args.
          (* size: size of vector to remove from *)
          private size = args at: 'size' ifAbsent: 10.
          (* seed: random seed to use *)
          private seed = args at: 'seed' ifAbsent: 56432.
          private random = Harness JenkinsRandom new: seed.
          (* block: evaluated to use as the value for each append when setting up the vector *)
          private block = args at: 'block' ifAbsent: [[:z | random next.]].
          private nextblock = args at: 'nextblock' ifAbsent: [[random next % size]].
          a ::= nil. 
          i ::= nil. |
    )
    (
       setup = (
            a:: Vector new: size.
            size timesRepeat: [ :i | 
                        a append: (block value: i)
            ].
        )

        before = (
            i:: nextblock value.
        )

        benchmark = (
            ^ a at: i.
        )

        verifyResult: result = (
            assert: (a at: i) equals: result
        )

    ) : (
    public newInstance = ( ^ self fromArgs: Dictionary new. )
    public newInstance: args = ( ^ self fromArgs: args )
    )

    public class VectorRandomRemove fromArgs: args = Benchmark (
        | private args = args.
          (* size: size of vector to remove from *)
          private size = args at: 'size' ifAbsent: 10.
          (* seed: random seed to use *)
          private seed = args at: 'seed' ifAbsent: 56432.
          private random = Harness JenkinsRandom new: seed.
          (* block: evaluated to use as the value for each append when setting up the vector *)
          private block = args at: 'block' ifAbsent: [[:z | random next.]].
          private nextblock = args at: 'nextblock' ifAbsent: [[random next % a size]].
          a ::= nil. 
          i ::= nil. |
    )
    (
       setup = (
            a:: Vector new: size.
            size timesRepeat: [ :i | 
                        a append: (block value: i)
            ].
        )

        before = (
            i:: a at: nextblock value.
        )

        benchmark = (
            ^ a remove: i
        )

        verifyResult: result = (
            assert: true equals: result
        )

    ) : (
    public newInstance = ( ^ self fromArgs: Dictionary new. )
    public newInstance: args = ( ^ self fromArgs: args )
    )

)