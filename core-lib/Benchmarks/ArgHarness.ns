(* Copyright (c) 2001-2015 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class ArgHarness usingPlatform: platform = Value (
(*  The Harness can be invoked on the command line and should be passed a list
    of benchmarks to run (class names) as arguments. It will run each of them
    and output single as well as a total. *)
| private system = platform system.
  private platform = platform.
  private ObjectMirror = platform mirrors ObjectMirror.
  private ClassMirror = platform mirrors ClassMirror.
  private Array  = platform kernel Array.
  private Vector  = platform kernel Vector.
  private Dictionary = platform collections Dictionary.
  private FilePath    = platform files FilePath.
  private Streams = platform streams.
|
)(

  public class Benchmark fromArgs: argsDict = (
  )(
    public innerBenchmarkLoop: innerIterations numThreads: threads = (
      | startTime endTime runTime totalTime |
      totalTime:: 0.
      self init.
      1 to: innerIterations do: [:i |
        self setup.
        startTime:: system ticks.
        self verifyResult: self benchmark.
        endTime:: system ticks.
        runTime:: endTime - startTime.
        totalTime:: totalTime + runTime.
        self teardown.
      ].
      self destroy.
      ^totalTime.
    )

    init = ()
    setup = ()
    benchmark  = ( self subclassResponsibility )
    teardown = ()
    destroy = ()

    verifyResult: result = ( self subclassResponsibility )

    assert: expected equals: value = (
      expected = value ifFalse: [
        self error: 'Expected value (' + expected asString +
                    ') differs from actual (' + value asString +
                    ') benchmark result.'
      ].
      ^ true
    )

  )

  public class Random new: seed = (
    | seed ::= seed. |
  ) (
    public next = (
      seed:: ((seed * 1309) + 13849) & 65535.
      ^ seed
    )
  ) : (
    public new = ( ^ self new: 74755 )
  )

  public class JenkinsRandom new: seed = (
    | private seed ::= seed. |
  ) (
    (* Robert Jenkins 32 bit integer hash function. *)
    public next = (
      (* Original version, with complete set of conversions. *)

         seed:: ((seed       + 2127912214)       + (seed as32BitUnsignedValue  << 12) as32BitSignedValue) as32BitSignedValue.
         seed:: ((seed bitXor: 3345072700) bitXor: (seed as32BitUnsignedValue >>> 19)) as32BitSignedValue.
         seed:: ((seed       +  374761393)       + (seed as32BitUnsignedValue  <<  5) as32BitSignedValue) as32BitSignedValue.
         seed:: ((seed       + 3550635116) bitXor: (seed as32BitUnsignedValue  <<  9) as32BitSignedValue) as32BitSignedValue.
         seed:: ((seed       + 4251993797)       + (seed as32BitUnsignedValue  <<  3) as32BitSignedValue) as32BitSignedValue.
         seed:: ((seed bitXor: 3042594569) bitXor: (seed as32BitUnsignedValue >>> 16)) as32BitSignedValue.

      (*   Optimized version, without semantically unnecessary conversions.


      seed:: ((seed       + 2127912214)       + (seed  << 12)) as32BitSignedValue. (* 0x7ed55d16 *)
      seed:: ((seed bitXor: 3345072700) bitXor: (seed >>> 19)).                    (* 0xc761c23c *)
      seed:: ((seed       +  374761393)       + (seed  <<  5)).                    (* 0x165667B1 *)
      seed:: ((seed       + 3550635116) bitXor: (seed  <<  9)).                    (* 0xd3a2646c *)
      seed:: ((seed       + 4251993797)       + (seed  <<  3)) as32BitSignedValue. (* 0xfd7046c5 *)
      seed:: ((seed bitXor: 3042594569) bitXor: (seed >>> 16)) as32BitSignedValue. (* 0xb55a4f09 *)
      *)
      ^ seed
    )
  )

  private class FakeVector = ()(
    public append: thing = (

    )
  )

  public class Run name: name benchmarkSuite: benchmarkSuite fromArgs: args = (
    | public args            ::= args.
      public benchmarkSuite  ::= benchmarkSuite.
      public name            ::= name.
      public total           ::= 0.
      public numIterations   ::= args at: 'numIterations' ifAbsent: 1.
      public runs            ::= Vector new: numIterations.
      public warmUp          ::= args at: 'warmUp' ifAbsent: 0.
      public innerIterations ::= args at: 'innerIterations' ifAbsent: 1.
      public numThreads      ::= args at: 'numThreads' ifAbsent: 1.
      public maxRuntime      ::= args at: 'maxRuntime' ifAbsent: 0.
      public printAll        ::= args at: 'printAll' ifAbsent: true.
      public outputToFile    ::= args at: 'outputToFile' ifAbsent: false.
      public time            ::= system time.
      public outputDir       ::= args at: 'outputDir' ifAbsent: '.'.
      public outputFile      ::= args at: 'outputFile' ifAbsent: name + time + '.csv'.
      public runInfoFile     ::= args at: 'runInfoFile' ifAbsent: name + time + '.info'.
    |
  )(

    public runBenchmark = (
      | result warmupBench |
      warmupBench:: benchmarkSuite newInstance: args.

      self doWarmup: warmupBench.

      self doRuns: (benchmarkSuite newInstance: args).
      self reportBenchmark.
      ^ runs
    )

    doWarmup: bench = (
      | numIterationsTmp printAllTmp maxRuntimeTmp runsTmp |
      warmUp > 0 ifFalse: [
        ^ self].

      numIterationsTmp:: numIterations.
      printAllTmp::      printAll.
      maxRuntimeTmp::    maxRuntime.
      runsTmp:: runs.
      runs:: FakeVector new.

      numIterations:: warmUp.
      printAll::      false.
      maxRuntime::    0.

      self doRuns: bench.

      numIterations:: numIterationsTmp.
      printAll::      printAllTmp.
      maxRuntime::    maxRuntimeTmp.
      runs:: runsTmp.

      total:: 0.
    )

    doRuns: bench = (
      | runTime |
      1 to: numIterations do: [:i |
        runTime:: bench innerBenchmarkLoop: innerIterations numThreads: numThreads.
        runs append: runTime.
        total:: total + runTime.

        maxRuntime > 0 ifTrue: [
          total > maxRuntime ifTrue: [
            numIterations:: i.
            ^ self ]].
        ].
    )

    reportBenchmark = (
      | report argstmp defaultargs fp cc i |

      outputToFile ifTrue: [
        fp:: FilePath for: outputDir.
        fp exists ifFalse: [
          fp createDirectory.
        ].
        fp:: FilePath for: outputDir + '/' + runInfoFile.
        cc:: fp charOutputStream.
      ].

      argstmp:: ' '.
      defaultargs:: ('numIterations','warmUp','innerIterations','numThreads',
        'numThreads','maxRuntime','printAll', 'outputToFile', 'outputDir',
        'outputFile', 'runInfoFile').

      args keys do: [ :arg | 
        (defaultargs contains: arg) ifFalse: [
          argstmp:: argstmp + arg + '=' + (args at: arg) + ' '
        ]
      ].

      report:: ('Benchmark: ' + name),
      ('   Iterations: ' + numIterations ),
      ('   Warmups: ' + warmUp),
      ('   Inner Iterations: ' + innerIterations),
      ('   Number of Threads: ' + numThreads),
      ('   Arguments: ' + argstmp),
      ('   TOTAL: ' + total + ' us'),
      ('   MEAN: ' + ((total / numIterations)) + ' us').

      report do: [ :x |
        printAll ifTrue: [
          x println.
        ].
        outputToFile ifTrue: [
          cc putAll: x.
          cc cr.
        ].
      ].

      outputToFile ifTrue: [
        cc close.

        fp:: FilePath for: outputDir + '/' + outputFile.
        cc:: Streams CharacterInputOutputConverter on: fp readWriteStream.
        i:: 1.
        runs do: [ :x |
          (* cc putAll: x asString. *)
          cc putAll: i asString + ',' + x asString.
          cc cr.
          i:: i + 1. 
        ].
        cc close.

      ].

    )
  )

  processArguments: args = (
    | runArgs idx arg val |
    (* First argument is the BenchmarkHarness *)
    runArgs:: Dictionary new.

    args size > 2 ifTrue: [ 
      1 to: ((args size) // 2 - 1) do: [:i | 
        idx:: i*2.
        arg:: (args at: idx+1).
        val:: (args at: idx+2).

        (arg beginsWith: '--') ifTrue: [
          arg:: arg substringFrom: 3 to: arg length.
        ].

        ('1234567890' includes: (val charAt: 1)) ifTrue: [
          val:: val asInteger.
        ].

        (val = 'true') ifTrue: [
          val:: true.
        ].

        (val = 'false') ifTrue: [
            val:: false.
        ].

        runArgs at: arg put: val.
      ].
    ].

    ^ runArgs
  )

  public main: args = (
    | run runArgs |
    args size < 2 ifTrue: [ self printUsage. ^ 1 ].
    runArgs:: processArguments: args.
    run:: Run name: (args at: 2) benchmarkSuite: (self loadBenchmarkSuite: (args at: 2)) fromArgs: runArgs.

    run runBenchmark.
    ^ 0
  )

  printUsage = (
    './som core-lib/Benchmarks/Harness.ns [benchmark] [--Argument value]...' println.
    '' println.
    '  benchmark      - benchmark file name or class name (supports nested classes with ".") ' println.
    '                   file name examples: core-lib/Benchmark/Queens.ns' println.
    '                   class name examples: Queens, Fibonacci, Sort.QuickSort, LanguageFeatures.Dispatch' println.
    '  Arguments:' println.
    '     numIterations - number of times to execute benchmark, default: 1' println.
    '     warmUp        - number of times to execute benchmark before measuring, default: 0' println.
    '     innerIterations     - number of times the benchmark is executed in an inner loop, ' println.
    '                   which is measured in total, default: 1' println.
    '     numThreads    - number of threads that run the benchmark, default: 1' println.
    '     maxRuntime    - time limit for the benchmark or 0 for no time limit, default: 0' println.
    '     printAll      - print runinfo output to terminal, default: true' println.
    '     outputToFile  - output individual run times to file, default: false' println.
    '     outputDir     - directory to output files to, gets created if it does not exist, default: .' println.
    '     outputFile    - file to output run times to, default: generated from benchmark name + time + .csv' println.
    '     runInfoFile   - file to output run info to, default: generated from benchmark name + time + .info' println.
    '' println.
    '  Any additional Arguments are passed to the benchmark' println.
  )


  loadFile: fileName = (
    | cls = system loadModule: fileName. |
    cls ifNil: [
        self error: 'Failed loading benchmark: ' + fileName ].
    ^ cls usingPlatform: platform andHarness: self.
  )

  loadModule: className = (
    | file cls |
    file:: className + '.ns'.
    cls:: system loadModule: file nextTo: self.
    cls ifNil: [
        self error: 'Failed loading benchmark: ' + className ].
    ^ cls usingPlatform: platform andHarness: self.
  )

  loadBenchmarkSuite: className = (
    | file module nested |
    (className endsWith: '.ns')
      ifTrue: [ ^ self loadFile: className ].
    (className includes: '.')
      ifFalse: [ ^ self loadModule: className ].

    nested:: className split: '.'.
    module:: self loadModule: (nested at: 1).
    ^ (ObjectMirror reflecting: module) perform: (nested at: 2) asSymbol
  )
)