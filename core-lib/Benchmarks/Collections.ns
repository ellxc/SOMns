
class Collections usingPlatform: platform = (
| private platform = platform.
  private harness  = (platform system loadModule: 'ArgHarness.ns' nextTo: self) usingPlatform: platform.
  private Run      = harness Run.
  private Dictionary = platform collections Dictionary.
  private Vector  = platform kernel Vector.
  summedAverages ::= 0. |
)(

  pow: a x: b = (
    (b = 0) ifTrue: [
      ^1.
    ].
    (b = 1) ifTrue: [
      ^a.
    ].
    ^ a * (pow: a x: (b - 1))
  )

  all = (
    | default runs |
    default:: 'numIterations', 10000, 'warmUp', 10000, 'outputToFile', true.
    runs:: Vector new.

    (* 0 to: 2 do: [ :i |
      runs append: (createRun: 'VectorBench.VectorAppend' args:  default, 'innerIterations', (1 * (pow: 10 x: i)), 'foo', 'bar')
    ]. *)

    0 to: 0 do: [ :i |
      runs append: (createRun: 'VectorBench.VectorAppend' args:  default, 'persist', true)
    ].

    ^ runs
  )

  createRun: name args: args = (
    | run idx runArgs|
    runArgs:: Dictionary new.
    0 to: ((args size) // 2 - 1) do: [:i | idx:: i*2.
    runArgs at: (args at: idx+1) put: (args at: idx+2)].
    run:: Run name: name benchmarkSuite: nil fromArgs: runArgs.
    ^ run
  )

  runAll = (
    all do: [:run |
      run runBenchmark.
    ].
  )

  public main: args = (
    runAll.
    ^ 0
  )
)
